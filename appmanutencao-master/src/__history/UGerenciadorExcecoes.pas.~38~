unit UGerenciadorExcecoes;

interface

uses
  System.SysUtils, Forms, System.Classes;

type
  TGerenciadorExcecoes = class
  private
    FLogFile: String;
    PastaServidor: String;
  public
    constructor Create;
    procedure TrataException(Sender: TObject; E: Exception);
    procedure GravarLog(Value: String);
    procedure LimparDiretorio;
  end;



  //function SalvarLogErro(ClasseErro, MensagemErro: string): string;

implementation

uses
  Vcl.Dialogs;



{function SalvarLogErro(ClasseErro, MensagemErro: string): string;
var
  Arquivo: TextFile;
  Pasta: string;
begin
  Pasta := ExtractFilePath(ParamStr(0)) + 'LogErros\ArquivoLogErros.txt';
  AssignFile(Arquivo, Pasta);
  if FileExists(Pasta) then
    Append(arquivo) { se existir, apenas adiciona linhas }
  {else
    ReWrite(arquivo); { cria um novo se não existir }
  //Writeln(Arquivo, 'Classe: ' + ClasseErro + ' - ' +
  //  'Mensagem: ' + MensagemErro); //escreve no arquivo e desce uma linha
  //Closefile(Arquivo); //fecha o handle de arquivo
  //result := Pasta; }
//end;

{ TGerenciadorExcecoes }

constructor TGerenciadorExcecoes.Create;
begin
  //FLogFile := ChangeFileExt(ParamStr(0), '.log');
  FLogFile := ExtractFilePath(ParamStr(0)) + 'LogErros\ArquivoLogErros.log';
  PastaServidor :=  ExtractFilePath(ParamStr(0)) + 'Servidor\';
  Application.onException := TrataException;
end;

procedure TGerenciadorExcecoes.GravarLog(Value: String);
var
  txtLog: TextFile;
begin
  AssignFile(txtLog, FLogFile);
  if FileExists(FLogFile) then
    Append(txtLog)
  else
    Rewrite(txtLog);

  Writeln(txtLog, Value);
  CloseFile(txtLog);
end;

procedure TGerenciadorExcecoes.TrataException(Sender: TObject; E: Exception);
begin

  GravarLog(StringofChar('=', 120));
  GravarLog('Inclusão: ' + FormatDateTime('dd-mm-yyy hh:mm:ss', Now));
  if TComponent(Sender) is TForm then
    begin
      GravarLog('Formulário: ' + TForm(Sender).Name);
      GravarLog('Caption do Formulário: ' + TForm(Sender).Caption);
      GravarLog('Nome da Classe: ' + E.ClassName);
      GravarLog('Erro: ' + E.Message);
      GravarLog('Arquivos Removidos da Pasta: ' + PastaServidor);
    end
  else
    begin
      GravarLog('Formulário: ' + TForm(TComponent(Sender).Owner).Name);
      GravarLog('Caption do Formulário:: ' + TForm(TComponent(Sender).Owner).Caption);
      GravarLog('Nome da Classe: ' + E.ClassName);
      GravarLog('Erro: ' + E.Message);
      GravarLog('Arquivos Removidos da Pasta: ' + PastaServidor);
    end;

  LimparDiretorio;
  GravarLog(StringofChar('=', 120));
  ShowMessage('Ocorreu um problema ao realizar o procedimento: ' + E.Message + #13 + #13 + #13
    + 'Arquivos removidos da pasta: ' + PastaServidor + #13 + #13 + #13
    + 'Log salvo em: ' + FLogFile);
end;

procedure TGerenciadorExcecoes.LimparDiretorio;
var
  SR: TSearchRec;
  I: integer;
  Diretorio: String;
begin
  Diretorio := PastaServidor;
  I := FindFirst(Diretorio + '*.*', faAnyFile, SR);
  while I = 0 do
  begin
    if (SR.Attr and faDirectory) <> faDirectory then
    begin
      if not DeleteFile(PChar(Diretorio + SR.Name)) then
      begin
        Exit;
      end;
    end;
    I := FindNext(SR);
  end;

end;

var
  MinhaExcecao: TGerenciadorExcecoes;

initialization
  MinhaExcecao := TGerenciadorExcecoes.Create;

finalization
  MinhaExcecao.Free;

end.
